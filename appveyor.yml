#---------------------------------# 
#      environment configuration  # 
#---------------------------------# 
os: WMF 5

environment:
  powershellgallery_api_token:
    secure: +e4nc0IUMbnSjiaFaWwjb00GGYhkQnxxN09gsbTrn/qZ90vOsLoDlKdZiqCRASWr
  powershellgalleryinternal_api_token:
    secure: qH5skGAL0hSzcNxTYw9CQPNc8kKPWMe9pHC564sdzmVczWtEZ63rMYzAtHsz4eAK
    
install: 
  - cinst -y pester
  - git clone https://github.com/KarolKaczmarek/AppVeyorSampleHelper
  - ps: Push-Location
  - cd AppVeyorSampleHelper
  - ps: Import-Module .\TestHelper.psm1 -force
  - ps: Pop-Location

#---------------------------------# 
#      build configuration        # 
#---------------------------------# 

build: false

#---------------------------------# 
#      test configuration         # 
#---------------------------------# 

test_script:
    - ps: |
        $testResultsFile = ".\TestsResults.xml"
        $res = Invoke-Pester -OutputFormat NUnitXml -OutputFile $testResultsFile -PassThru
        (New-Object 'System.Net.WebClient').UploadFile("https://ci.appveyor.com/api/testresults/nunit/$($env:APPVEYOR_JOB_ID)", (Resolve-Path $testResultsFile))
        if ($res.FailedCount -gt 0) { 
            throw "$($res.FailedCount) tests failed."
        }

#---------------------------------# 
#      artifacts configuration    # 
#---------------------------------# 

artifacts:
  - path: lib
    name: lib
    type: zip
    
#---------------------------------# 
#      deployment configuration   # 
#---------------------------------# 

# Script to run during the deployment 
deploy_script: 
  - ps: |
      # Publish to PowerShell Gallery on tag
      if ($env:APPVEYOR_REPO_TAG -eq $false) #TODO Temporarily publish when its not tagged (for testing)
      {
        # Register internal PS Gallery repository (this is for testing purposes only, please use powershellgallery.com)
        Register-PSRepository -Name InternalPSGallery -SourceLocation https://dtlgalleryint.cloudapp.net/api/v2 -PublishLocation https://dtlgalleryint.cloudapp.net/api/v2/package/
        
        Write-Host "Publishing $env:APPVEYOR_PROJECT_NAME to PowerShellGallery"
        $projectUri = "https://github.com/KarolKaczmarek/$env:APPVEYOR_PROJECT_NAME"
        $licenseUri = "https://github.com/KarolKaczmarek/$env:APPVEYOR_PROJECT_NAME/blob/master/LICENSE"
        $tag = 'AutoDeployed'
        Publish-Module -Path $env:APPVEYOR_BUILD_FOLDER -ProjectUri $projectUri -LicenseUri $licenseUri -Tag $tag -NuGetApiKey $env:powershellgalleryinternal_api_token -Repository InternalPSGallery -verbose
      }
      
      # Creating project artifact
      $stagingDirectory = (Resolve-Path ..).Path
      $zipFilePath = Join-Path $stagingDirectory "$(Split-Path $pwd -Leaf).zip"
      Add-Type -assemblyname System.IO.Compression.FileSystem
      [System.IO.Compression.ZipFile]::CreateFromDirectory($pwd, $zipFilePath)
      
      Write-Host "TODO-temporary stagingDirectory = $stagingDirectory; APPVEYOR_BUILD_FOLDER = $env:APPVEYOR_BUILD_FOLDER; projectUri = $projectUri; licenseUri = $licenseUri; tag = $tag"
      Write-Host "TODO TEMP DIR: C:\Users\appveyor\AppData\Local\PackageManagement\ProviderAssemblies"
      dir "C:\Users\appveyor\AppData\Local\PackageManagement\ProviderAssemblies"
      Write-Host "TODO TEMP DIR: C:\Program Files\PackageManagement\ProviderAssemblies"
      dir "C:\Program Files\PackageManagement\ProviderAssemblies"
      
      # Creating NuGet package artifact
      #New-Item nuget -ItemType Directory > $null
      New-Nuspec -packageName $env:APPVEYOR_PROJECT_NAME -version $env:APPVEYOR_BUILD_VERSION -author "MS" -owners "MS" -licenseUrl "https://github.com/PowerShell/DscResources/blob/master/LICENSE" -projectUrl "https://github.com/$($env:APPVEYOR_REPO_NAME)" -packageDescription $env:APPVEYOR_PROJECT_NAME -tags "DesiredStateConfiguration DSC DSCResourceKit" -destinationPath .
      nuget pack ".\$($env:APPVEYOR_PROJECT_NAME).nuspec" -outputdirectory .
      $nuGetPackageName = $env:APPVEYOR_PROJECT_NAME + "." + $env:APPVEYOR_BUILD_VERSION + ".nupkg"
      $nuGetPackagePath = (Get-ChildItem $nuGetPackageName).FullName
      
      @(
          # You can add other artifacts here
          $zipFilePath,
          $nuGetPackagePath
      ) | % { 
          Write-Host "Pushing package $_ as Appveyor artifact"
          Push-AppveyorArtifact $_
        }
      Write-Host "APPVEYOR_REPO_TAG = $env:APPVEYOR_REPO_TAG; APPVEYOR_BUILD_FOLDER = $env:APPVEYOR_BUILD_FOLDER ; PWD = $pwd" 
      
deploy:

    # Deploying to GitHub
#  - provider: GitHub
#    release: $(appveyor_project_name)-v$(appveyor_build_version)
#    description: Release of $(appveyor_project_name)-v$(appveyor_build_version)
#    tag: $(appveyor_project_name)-v$(appveyor_build_version)
#    auth_token:
#      secure: ++aemfGy5WMYfJLgZvP7ox7UwfNzn4uwIIFoobB1MEzewjMjl29oW0m98Fnz/NKb
#    draft: false
#    prerelease: false
#    on:
#      #branch: dev
#      # Determines whether to deploy only on regular commits or commits with tags
#      appveyor_repo_tag: false 

    # Deploying to NuGet
#  - provider: NuGet
#    server: https://ci.appveyor.com/nuget/karol-neqk5nffsnll
#    api_key:
#      secure: V4vwOTsPWWwWasVZPVTY949Fuc93lffGRT2UAfz28wM=
#    skip_symbols: true
#    on:
#      appveyor_repo_tag: false


#---------------------------------# 
#      global handlers            # 
#---------------------------------# 
        
        
