#---------------------------------# 
#      environment configuration  # 
#---------------------------------# 

install: 
  - cinst -y pester
  - ps: |
      nuget.exe spec

#---------------------------------# 
#      build configuration        # 
#---------------------------------# 

build: false

#---------------------------------# 
#      test configuration         # 
#---------------------------------# 

test_script:
    - ps: |
        $testResultsFile = ".\TestsResults.xml"
        $res = Invoke-Pester -OutputFormat NUnitXml -OutputFile $testResultsFile -PassThru
        (New-Object 'System.Net.WebClient').UploadFile("https://ci.appveyor.com/api/testresults/nunit/$($env:APPVEYOR_JOB_ID)", (Resolve-Path $testResultsFile))
        if ($res.FailedCount -gt 0) { 
            throw "$($res.FailedCount) tests failed."
        }

#---------------------------------# 
#      artifacts configuration    # 
#---------------------------------# 

artifacts:
  - path: lib
    name: lib
    type: zip
    
#---------------------------------# 
#      deployment configuration   # 
#---------------------------------# 

deploy:

    # Deploying to GitHub
  - provider: GitHub
    release: AppVeyorSample-v$(appveyor_build_version)
    description: Release of AppVeyorSample-v$(appveyor_build_version)
    tag: AppVeyorSample-v$(appveyor_build_version)
    auth_token:
      secure: 1Y8dcTfYEodas1RozybiCbQeUL6tMwpaKSJyRCN0s/LTABwaOOtBAqMEy9KxXgNp
    draft: false
    prerelease: false
    on:
      branch: dev              
      # Determines whether to deploy only on regular commits or commits with tags
      appveyor_repo_tag: false 

    # Deploying to NuGet
  - provider: NuGet
    server: https://ci.appveyor.com/nuget/appveyorsample-m6icy7u2i2x7
    api_key:
      secure: saLWD0OK+Ertxb4/VTdM1AkQY6j9ozPNGBczwXTaWdc=
    skip_symbols: true


#---------------------------------# 
#      global handlers            # 
#---------------------------------# 

on_finish:
    - ps: |
        $stagingDirectory = (Resolve-Path ..).Path
        $zipFile = Join-Path $stagingDirectory "$(Split-Path $pwd -Leaf).zip"
        Add-Type -assemblyname System.IO.Compression.FileSystem
        [System.IO.Compression.ZipFile]::CreateFromDirectory($pwd, $zipFile)
        @(
            # You can add other artifacts here
            (ls $zipFile)
        ) | % { Push-AppveyorArtifact $_.FullName }
